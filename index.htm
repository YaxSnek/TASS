<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Excel to Accordion</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- <link href="css/styles.css" rel="stylesheet"> -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>

  <style>
    .square {
      display: inline-flex;
      width: 100px;
      height: 100px;
      background: #98d2fd;
      text-align: center;
      justify-content: center;
    }

    .accordion-body {
      padding: 5px;
    }

    .filter-container {
      display: flex;
      gap: 5px;
      align-items: center;
      margin-top: 10px;
    }

    #reset-button {
      padding: 2px 16px;
      font-size: 12px;
      line-height: 1;
      border-radius: 6px;
      margin-top: 5px;
    }

    .reset-container {
      display: flex;
      justify-content: center;
      margin-top: 6px;
    }
  </style>
</head>

<body>
  <div class="container mt-4">
    <h1>Excel to Accordion</h1>
    <input type="file" id="file-input" accept=".xlsx, .xls" />

    <!-- filters/inputs -->
    <div class="filter-container">
      <select class="form-select form-select-sm" aria-label=".form-select-sm example">
        <option selected>Filter by Country</option>
      </select>
      <input class="form-control form-control-sm" list="datalistOptions" id="exampleDataList"
        placeholder="Search by name...">
      <datalist id="datalistOptions"></datalist>
    </div>

    <!-- reset -->
    <div class="reset-container">
      <button class="btn btn-secondary btn-sm" id="reset-button">Reset</button>
    </div>

    <div class="accordion accordion-flush mt-4" id="accordionFlushExample"></div>
  </div>


  <script>
    $(document).ready(function () { //when document is ready the fun begins


      /* ###### Load data from excel file ###### */
      let snakesData = {}; //store processed data

      //file input event
      $('#file-input').on('change', function (event) {
        const file = event.target.files[0]; //get first file
        if (!file) return; //stop if no file selected

        const reader = new FileReader(); //create a new file reader

        reader.onload = function (e) {
          //convert data to binary list
          const data = new Uint8Array(e.target.result);
          //read excel file
          const workbook = XLSX.read(data, { type: 'array' });
          //get first sheet name
          const sheetName = workbook.SheetNames[0];
          //access the sheet
          const sheet = workbook.Sheets[sheetName];
          //convert sheet to JSON
          const jsonData = XLSX.utils.sheet_to_json(sheet);
          //and... pass data to the func
          processExcelData(jsonData);
        };
        //read file as array buffer
        reader.readAsArrayBuffer(file);

        // FileReader API: https://developer.mozilla.org/en-US/docs/Web/API/FileReader
        // SheetJS (xlsx library) documentation: https://github.com/SheetJS/sheetjs
        // ArrayBuffer: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer
        // SheetJS utility for sheet-to-JSON conversion: https://docs.sheetjs.com/docs/api/utilities/#sheet_to_json
      });


      /* ###### Get unique countries from data ###### */
      function getUniqueCountries(data) {
        const uniqueCountries = []; //store unique countries
        data.forEach(row => {
          if (row["Country"]) { //if country exists
            //split by comma, trim and add to unique countries[]
            const countries = row["Country"].split(",").map(country => country.trim());
            countries.forEach(country => { //loop through countries
              if (!uniqueCountries.includes(country)) {//if country not in unique countries
                uniqueCountries.push(country);//add to unique countries
              }
            });
          }
        });
        return uniqueCountries; //return unique countries[data]

        // Array.prototype.forEach(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach
        // String.prototype.split(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split
        // Array.prototype.map(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map
        // Array.prototype.includes(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes
      }


      /* ###### Create country dropdown ###### */
      function createCountryDropdown(countries) { //pass uniqueCountries
        const countrySelect = $('.form-select').empty();//empty <select>
        //add default option
        countrySelect.append('<option selected>Filter by Country</option>');
        countries.sort(); //sort countries alphabetically
        countries.forEach(country => { //loop through countries...
          //...and add to <select>
          countrySelect.append(`<option value="${country}">${country}</option>`);

          // jQuery .empty(): https://api.jquery.com/empty/
          // jQuery .append(): https://api.jquery.com/append/
          // Array.prototype.sort(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort
        });
      }


      /* ###### Create snakes datalist ###### */
      function populateDatalist(snakes) { //pass snake names
        //empty datalist(in case of previous data)
        const datalist = $('#datalistOptions').empty();
        snakes.sort(); //sort snake names alphabetically
        snakes.forEach(snake => { //loop through snake names...
          //...and add to datalist
          datalist.append(`<option value="${snake}"></option>`);
        });
      }


      /* ###### Process excel data ###### */
      function processExcelData(data) {
        //columns to exclude
        const excludedColumns = ["species#", "Caption", "ImageFileName", "ImageType", "VentralColor", "VentralPattern"];
        snakesData = {}; //reset data(in case of previous data)

        data.forEach(row => { //loop through...
          //if species exists, convert to string and trim. else, return empty string
          let species = row["Species"] ? row["Species"].toString().trim() : "";
          //skips if species is empty or null(NULL)
          if (!species || species.toLowerCase() === "null") return;
          //if species not in snakesData, add it
          snakesData[species] = snakesData[species] || {};
          //$.each works with both arrays and objects
          $.each(row, function (key, value) { //loop through key-value pairs...
            //...skip if:
            //value is empty or null
            //column is "Species" (already handled)
            //column is in the excludedColumns array
            //calue is "null"
            if (!value || key === "Species" || excludedColumns.includes(key) || value.toLowerCase() === "null") return;

            const trimmedValue = value.toString().trim();
            const group = snakesData[species][key] = snakesData[species][key] || [];
            if (!group.includes(trimmedValue)) group.push(trimmedValue);

            // Object.entries: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries
          });
        });
        const uniqueCountries = getUniqueCountries(data); //get unique countries
        createCountryDropdown(uniqueCountries); //create country dropdown
        const snakeNames = Object.keys(snakesData); //crate datalist with snake names
        populateDatalist(snakeNames); //create datalist(snakeNames)
        displayAccordion(snakesData); //show data in accordion
        filterByCountry(snakesData); //show/hide accordion items based on country
        filterBySnakeName(snakesData); //show/hide accordion items based on snakeName
      }


      /* ###### Display accordion ###### */
      function displayAccordion(data) {
        //empty accordion
        const accordion = $('#accordionFlushExample').empty();
        let index = 0; //accordion item index
        $.each(data, function (species, details) { //loop through data...
          index++;
          //accordion id
          const accordionId = `flush-collapse${index}`;
          const headerId = `flush-heading${index}`;

          //accordion template literal
          const accordionItem = `
            <div class="accordion-item">
              <h2 class="accordion-header" id="${headerId}">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#${accordionId}" aria-expanded="false" aria-controls="${accordionId}">
                  ${species}
                </button>
              </h2>
              <div id="${accordionId}" class="accordion-collapse collapse" aria-labelledby="${headerId}" data-bs-parent="#accordionFlushExample">
                <div class="accordion-body">
                  <div class="square">IMG_1</div>
                  <div class="square">IMG_2</div>
                  <div class="square">IMG_3</div>
                  ${generateDetailsList(details)}
                </div>
              </div>
            </div>
          `;

          accordion.append(accordionItem); //add accordion item to accordion

          // jQuery.each(): https://api.jquery.com/jquery.each/
          // Template Literals: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals
          // jQuery.empty(): https://api.jquery.com/empty/
          // jQuery.append(): https://api.jquery.com/append/
        });
      }


      /* ###### Generate details list ###### */
      function generateDetailsList(details) {
        let html = "";
        $.each(details, function (key, values) { //
          //format values
          const formattedValues = values.map(value => {
            //split by comma, trim and capitalize first letter
            const items = value.split(",").map(item => item.trim());
            const cleanedItems = items.map(item => {
              const words = item.split(" ").map(word => { //split by space
                if (word.startsWith("(")) { //if word starts with "("...
                  //...capitalize second letter and convert the rest to lowercase
                  return `(${word.charAt(1).toUpperCase()}${word.slice(2).toLowerCase()}`;
                }
                //capitalize first letter and convert the rest to lowercase
                return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
              });
              return words.join(" "); //join by space
            });
            return cleanedItems.join(", "); //join by comma
          });

          // If key is "Coder (Name)", separate with ", "
          //Otherwise, separate with "<strong> / </strong>" (fatty slash)
          const separator = key === "Coder (Name)" ? ", " : "<strong> / </strong>";
          html += `<div><strong>${key}:</strong> ${formattedValues.join(separator)}</div>`;
        });
        return html; //return completed html

        // Array.prototype.map(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map
      }


      /* ###### Filter by country ###### */
      function filterByCountry(data) {
        $('.form-select').on('change', function () {
          const selectedCountry = $(this).val(); //get selected country
          const accordion = $('#accordionFlushExample'); //get accordion
          //if default option selected, show all accordion items
          if (selectedCountry === "Filter by Country") {
            accordion.children().show();
            return; //stop
          }

          accordion.children().each(function () { //loop through accordion items...
            //...get species name
            const species = $(this).find('.accordion-header button').text().trim();
            //if species exists in data...
            const details = data[species];
            let matches = false; //track if country matches

            //loop through details
            $.each(details, function (key, values) {
              //some() method checks if any value in the species details array contains the selected country.
              //if key is "Country" and values include selected country
              if (values.some(value => value.includes(selectedCountry))) {
                matches = true; //set matches to true if country found
              }
            });

            if (matches) { //if matches found, show accordion item
              $(this).show();
            }
            else { //else, hide accordion item
              $(this).hide();
            }

            // jQuery.on(): https://api.jquery.com/on/
            // jQuery.val(): https://api.jquery.com/val/
            // jQuery.find(): https://api.jquery.com/find/
            // jQuery.text(): https://api.jquery.com/text/
            // jQuery.trim(): https://api.jquery.com/jQuery.trim/
            // jQuery.each(): https://api.jquery.com/jquery.each/
            // Array.prototype.some(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some
            // Array.prototype.includes(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes
            // jQuery.show(): https://api.jquery.com/show/
            // jQuery.hide(): https://api.jquery.com/hide/
          });
        });
      }


      /* ###### Filter by snake name ###### */
      function filterBySnakeName(data) {
        $('#exampleDataList').on('input', function () {
          //get input trimmed and Lowercased
          const selectedSnake = $(this).val().trim().toLowerCase();
          const accordion = $('#accordionFlushExample');

          //selects all child elements of the accordion container (e.g., all accordion items).
          accordion.children().each(function () {
            const species = $(this).find('.accordion-header button').text().trim().toLowerCase();
            if (species === selectedSnake) {
              $(this).show();
            } else {
              $(this).hide();
            }
          });
        });
      }


      /* ###### Reset filters ###### */
      $('#reset-button').on('click', function () {
        $('#exampleDataList').val(''); //clear datalist input
        $('.form-select').val('Filter by Country'); //reset select dropdown
        $('#accordionFlushExample').children().show(); //show all accordion items
      });
    });

    $(document).ready(function () {
      const countrySelect = $('.form-select');
      const snakeInput = $('#exampleDataList');

      //when changing the country dropdown, reset the snake name input field
      countrySelect.on('change', function () {
        snakeInput.val(''); //clear snake input field
      });

      //when typing in the snake name input field, reset the country dropdown
      snakeInput.on('input', function () {
        countrySelect.val('Filter by Country'); //reset country dropdown
      });

      // jQuery.val(): https://api.jquery.com/val/
      // jQuery.on(): https://api.jquery.com/on/
      // jQuery.show(): https://api.jquery.com/show/
    });
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
</body>

</html>